    Object：所有类的超类
    Object类时Java中所有类的始祖，在Java中每个类都扩展了Object。但是并不需要这样写：
        public class Employee extends Object
    如果没有明确的指出超类，Object就被认为是这个类的超类。

    1. Object类型的变量
    可以使用Object类型的变量引用任何类型的对象：
        Object obj = new Employee("Harry Hacker",35000);
    当然，Object类型的变量只能用于作为各种值的一个泛型容器。要想对其中的内容进行具体的操作，还需要清楚对象的原始类型，并进行相应的强制类型转换：
        Employee e = (Employee) obj;
    在Java中，只有基本类型(primitive type)不是对象，例如数值，字符和布尔型的值都不是对象。
    所有的数组类型，不管是对象数组还是基本类型的数组都扩展了Object类。
        Employee[] staff = new Employee[10];
        obj = staff;   //OK
        obj = new int[10];  //OK

    2. equals方法
    Object类的equals方法用于检测一个对象是否等于另外一个对象。
    例如，如果两个员工对象的姓名，薪水和雇佣日期都一样，就认为他们是相等的(在实际的员工数据库中，比较ID才更有意义)。
    下面这个示例能够展示equals方法的实现机制
        public class Employee
        {
        . . .
        public boolean equals(Object otherObject)
        {
        //a quick junit_test to see if the objects are identical
        if (this == otherObject) return true;

        //must return false if the explicit parameter is null
        if (otherObject == null) return false;

        //if the class don't match, they can't be equal
        if (getClass() != otherObject.getClass())
        return false;

        //now we know otherObject is a non-null Employee
        Employee other = (Employee) otherObject;

        //junit_test whether the fields have identical values
        return name.equals(other,name)
        && salary == other.salary
        && hireDay.equals(other.hireDay);
        }
        }
    在子类中定义equals方法时，首先调用超类的equals。如果检测失败，对象就不可能相等。如果超类中的字段都相等，就需要比较子类中的实例字段。
        public class Manager extends Employee
        {
        . . .
        public boolean equals(Object otherObject)
        {
        if (!super.equals(otherObject))return false;
        //super equals checked that this and otherObject belong to the same class
        Manager other = (Manager) otherObject;
        return bonus == other.bonus;
        }
        }

    3. 相等测试与继承
    Java语言规范要求equals方法具有下面的特性：
 * 自反性：对于任何非空引用x，x.equals(x)应当返回true。
 * 对称性：对于任何引用x和y，当且仅当y.equals(x)返回true时，x.equals(y)返回true。
 * 传递性：对于任何引用x, y, z，如果x.equals(y)返回true，y.equals(z)返回true，x。equals(z)也应该返回true。
 * 一致性：如果x和y引用的对象没有发生变化，反复调用x.equals(y)应该返回同样的结果。
 * 对于任意非空引用x，x.equals(null)应该返回false。

    编写完美equals方法的建议：
 ① 显示参数命名为otherObject，稍后需要将它强制转换成另一个名为other的变量。
 ② 检测this与otherObject是否相等：
        if (this == otherObject) return true;
    这条语句只是一个优化。实际上这是一种经常采用的形式。因为检查身份要比逐个比较字段开销小
 ③ 检测otherObject是否为null，如果为null，返回false。这项检测很有必要。
        if (otherObject == null) return false;
 ④ 比较this与otherObject的类。如果equals的语句可以在子类中改变，就使用getClass检测
        if (getClass() != otherObject.getClass()) return false;
    如果所有的子类都具有相同的相等性语义，可以使用instanceof检测：
        if(!(otherObject instanceof ClassName)) return false;
 ⑤ 将otherObject强制转换为相应类类型的变量
        ClassName other = (ClassName) otherObject
 ⑥ 现在根据相等性概念的要求来比较字段。使用==比较基本类型字段，使用Objects.equals比较对象字段。如果所有的字段都匹配，就返回true，否则返回false
        return field1 == other.field1
        &&Objects.equals(field2, other.field2)
        && . . .;
 * 对于数组类型的字段，可以使用静态的Arrays.equals方法检测相应的数组元素是否相等

    4. hashCode方法
    散列码(hash code)是有对象导出的一个整型值。散列码是没有规律的。如果x和y是两个不同的对象，x.hashCode( )与y.hashCode( )基本上不会相同。
        String类试用一下算法计算散列码
        int hash = 0;
        for (int i = 0; i < length(); i++)
        hash = 31 * hash + charAt(i);
    由于hashCode方法定义在Object类中，因此每个对象都有一个默认的散列码，其值由对象的储存地址得出。如下例子：
        var s = "Ok";
        var sb = new StringBuilder(s);
        System.out.println(s.hashCode() + " " + sb.hashCOde());
        var t = new String("Ok");
        var tb = new StringBuilder(t);
        System.out.println(t.hashCode() + " " + tb.hashCode());
    输出结果
        s = 2556   t = 2556    sb = 20526976   tb = 20527144
    s和t有相同的散列码，这是因为字符串的散列码是由内容导出的。而字符串构建器sb与tb却有着不同的散列码，因为在StringBuilder类中没有定义hashCode
 方法，而Object类的默认hashCode方法会从对象的储存地址得出散列码。hashCode方法应该返回一个整数(也可以是负数)。要合理的组织实例字段的散列码，以便
 能够让不同对象产生的散列码分布更加均匀。
    例如，下面是Employee类的hashCode方法。
        public class Employee
        {
        public int hashCode()
        {
        return 7 * name.hashCode() + 11 * newDouble(salary).hashCode() + 13 * hireDay.hashCode();
        }
        . . .
        }
    不过还可以做得更好。首先，最好使用null安全的方法Objects.hashCode。如果其参数为null，这个方法会返回0，否则返回对参数调用hashCode的结果。
 另外，使用静态方法Double.hashCode来避免创建Double对象：
        public int hashCode()
        {
        return 7 * Objects.hashCode(name) + 11 * Double.hashCode(salary) + 13 * Objects.hashCode(hireDay);
        }
    还有更好的方法是，需要组合多个散列值时，可以调用Objects.hash并提供所有这些参数。这个方法会对各个参数调用Objects.hashCode，并组合这些散列
 值。这样Employee.hashCode方法可以简单的写为：
    public int hashCode()
        {
        return Objects.hash(name, salary, hireDay);
        }
    equals与hashCode的定义必须相容：如果x.equals(y)放回true，那么x.hashCode( )就必须与y.hashCode( )返回相同的值。
    例如，如果定义Employee.equals比较员工的ID，那么hashCode方法就需要散列ID，而不是员工的姓名或储存地址。

    5. toString方法
    在Object方法中有一个非常重要的方法，就是toString方法，它会返回表示对象值的一个字符串。
 下面是一个典型例子。Point类的toString方法将返回下面这样的字符串：
        java.wat.Point[x=10,y=20]
    绝大多数(但不是全部)的toString方法都遵循这样的格式：类的名字，随后是一对方括号括起来的字段值。下面是
 Employee类中的toString方法的实现：
        public String toString()
        {
        return "Employee[name = " + name + ", salary = " + salary + ", hireDay = " + hireDay + "]";
        }
    实际上可以设计的更好。最好通过调用getClass().getName()获得类名的字符串，而不要将类名硬编码写到toString方法中。
        public String toString()
        {
        return getClass().getName() + "[name = " + name + ", salary = " + salary + ". hireDay = " + hireDay + "]";
        }
    这样toString方法也可以由子类调用。
    设计子类的程序员应该定义自己的toString方法，并加入子类的字段。如果超类使用了getClass( ).getName( )，那么子类只需要调用
        super.toString( )
    就可以了。
    例如下面是Manager类中的toString方法：
        public class Manager extends Employee
        {
        public String toString()
        {
        return super.toString() + "[bonus = " + bonus + "]";
        }
        }
    现在，Manager对象将打印输出如下所示的内容：
        Manager[name = . . ., salary = . . ., hireDay = . . .][bonus = . . .]
    随处可见toString方法的主要原因是：只要对象与一个字符串透过操作符"+"连接起来，Java编译器就会自动地调用toString
    方法来获得这个对象的字符串描述。例如：
        var p = new Point(10, 20);
        String message = "The current position is " + p;    //自动调用p.toString
    如果x是一个任意对象，并调用
        System.out.println(x);
    println方法就会简单地调用x.toString( )，并打印输出得到的字符串。
    Object类定义了toString方法，可以打印对象的类名和散列码。例如，调用
    System.out.println(System.out)
 将生成一下输出
        java.io.PrintStream@2f6684
    之所以得到这样的结果，是因为PrintStream类的实现者没有覆盖toString方法。
    toString方法是一种非常有用的调试工具。在标准类库中，许多类都定义了toString方法，以便用户获得一些有关对象状态的有用信息。像下面这样显式日志信
 息非常有益：
        System.out.println("Current position = " + position);