 有时，需要将int这样的基本类型转换为对象。所有的基本类型都有一个与之对应的类。例如，integer类对应基本类型int。
 通常，这些类称为包装器(wrapper)。这些包装器有显而易见的名字：Integer, Long, Float, Double, Short, Byte, Character
 和Boolean(前6个类派生于公共的超类Number)。包装器类是不可变的，即一旦构造了包装器，就不允许更改包装在其中的值。同时，
 包装器类还是final，因此不能派生它们的子类。
 假设要定义一个整型数组列表，但尖括号中的类型参数不允许是基本型，也就是说不允许携程ArrayList<int>。这里就可以用到Integer包
 装器类。我们可以声明一个Integer对象的数组列表。
    var list = new ArrayList<Integer>();
 * 由于每个值分别包装在对象中，所以ArrayList<Integer>的效率远远低于int[ ]数组。
 有一个很有用的特性，从而可以容易地向ArrayList<Integer>添加int类型地元素。下面这个调用
    list.add(3);
 将自动地变成
    list.add[Integer.valueOf(3)];
 这种变换称为自动装箱(autoboxing)。

 相反的，将一个Integer对象赋给一个int值时，将会自动地拆箱。也就是说，编译器将以下语句
    int n = list.get(i);
 转换成
    int n = list.get(i).intValue();
 自动地装箱和拆箱也适用于算术表达式。例如，可以将自增运算符应用于一个包装器引用：
    Integer n = 3;
    n++;
 编译器将自动地插入一条对象拆箱的指令，然后进行自增计算，最后再将结果装箱。
 大多数情况下容易有一种家乡，认为基本类型与他们的对象包装器是一样的。但是他们有一点有很大不同：同一性。
 ==运算符可以应用于包装器对象，不过检测的是对象是否有相同的内存位置，因此下面的比较通常会失败：
    Integer a = 1000;
    Integer b = 1000;
    if (a == b) . . .
 不过，Java实现有可能让她成立。如果将经常出现的值包装到相同的对象中，这种比较就可能成功。这种不确定的结果并不理想，
 因而解决这个问题的方法是在比较两个包装器对象是调用equals方法。

 由于包装器类引用可以为null，所以自动装箱可能会抛出一个NullPointerException异常：
    Integer n = null;
    System.out.println(2 * n);  //throws NullPointerException
 另外，如果在一个条件表达式中混合使用Integer和Double类型，Integer值就会拆箱，提升为double，再装箱为Double：
    Integer n = 1;
    Double x = 2.0;
    System.out.println(true ? n : x);   //prints 1.0


