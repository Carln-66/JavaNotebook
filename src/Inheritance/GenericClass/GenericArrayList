    泛型数组列表
    在Java中允许在运行时确定数组的大小。
        int actualSize = . . .;
        var staff = new Employee[actualSize];
    当然，这段代码没有完全解决运行时动态更改数组大小的问题。一旦确定了数组大小就不能够很容易的改变它。
    在Java中，解决这个问题的方法是使用Java中的另外一个类，名为ArrayList。ArrayList类类似于数组，但在添加或删除元素时，它能够自动的调整数组容
 量，而不需要为此编写任何代码。
    ArrayList是一个有类型参数(type parameter)的泛型类(generic class)。为了指定数值列表保存的元素对象的类型，需要用一对尖括号将类名括起来追
 加到ArrayList后面。例如ArrayList<Employee>。

    1. 声明数组列表
 声明和构造一个保存Employee对象的数组列表
        ArrayList<Employee> staff = new ArrayList<Employee>();
 Java10中，最好使用var关键字以避免重复写类名
        var staff = new ArrayList<Employee>();
 如果没有var关键字，可以省去右边的类型参数：
        ArrayList<Employee> staff = new ArrayList<>();
 这称为“菱形”语法。

 使用add方法可以将元素添加到数组列表中。例如：
        staff.add(new Employee("Harry Hacker", . . .));
        staff.add(new Employee("Tony Tester", . . .));
    数组列表内管理者一个内部的对象引用数组。最终，这个数组的空间有可能全部佣金；如果调用add而内部数组已经满了，数组列表就会自动地创建一个更大的数，
 并将所有的对象从较小的数组中拷贝到较大的数组中。如果已经知道或能够估计出数组可能储存的元素数量，就可以在填充数组之前调用ensureCapacity方法：
        staff.ensureCapacity(100);
    这个方法调用将分配一个包含100个对象的内部数组。这样一来，前100次add调用不会带来开销很大的重新分配空间。
 另外，还可以把初始容量传递给ArrayList构造器：
        ArrayList<Employee> staff = new ArrayList<>(100);

 *  如下分配数组列表
 *      new ArrayList<>(100)    //capacity is 100
 *  与分配一个新数组有所不同
 *      new Employee[100]   //size is 100
 *  数组列表的容量与数组大小有一个非常重要的区别。如果分配一个有100个元素的数组，数组就有100个空位置(槽)可以使用。
 *  而容量为100个元素的数组列表，只是可能保存100个元素(实际上也可以超过100，不过要一重新分配空间为代价)，但是在最初，甚至完成初始化构造之后，数组
 列表不包含任何元素。

 size方法返回数组列表中包含的实际元素个数。例如
        staff.size()
    将返回staff数组列表的当前元素个数，它等价于数组a的a.length。
    一旦能够确认数组列表的大小将保持恒定，不再发生变化，就可以调用trimToSize方法。这个方法将储存块的大小调整为保存当前元素数量所需要的储存空间。
 垃圾回收器将回收多余的储存空间。一旦削减了数组列表的大小，添加新元素就要花时间再次移动储存快，所以应该在确认不会再向数组列表添加任何元素时再调用
 trimToSize.

    2. 访问数组列表元素
 需要使用get和set方法访问或改变数组的元素
        staff.set(i, harry);
 它等价于对数组a的元素赋值(与数组一样，下标从0开始)：
        a[i] = harry;
 要得到一个数组列表的元素，可以使用
        Employee e = staff.get[i];
 这等价于
        Employee e = a[i];

 *  没有泛型类时，原始的ArrayList类提供的get方法别无选择，只能返回Object，因此，get方法的调用者必须对返回值进行强制类型转换：
 *      Employee e = [Employee] staff.get(i);
 *  原始的ArrayList还存在一定的危险性。他的add和set方法接受任意类型的对象。对于下面这个调用：
 *      staff.set.set(i, "Harry Hacker");
 *  他能正常的编译而不会给出任何警告，只有在检索对象并试图对他进行强制类型转换时，才会发现有问题。如果使用ArrayList<Employee>，
 *  编译器会检测到这个错误。

 下面这个技巧可以一举两得，既可以灵活的扩展数组，又可以方便的访问数组元素。首先，创建一个数组列表，并添加所有的元素。
        var list = new ArrayList<x>();
        while(. . .)
        {
            x = . . .;
            list.add(x);
        }
 执行完上述操作后，使用toArray方法将数组元素拷贝到一个数组中。
        var a = new X[list.size()];
        list.toArray(a);
 有时需要在数组列表的中间插入元素，为此可以使用add方法并提供一个索引参数。
        int n = staff.size() / 2;
        staff.add(n, e);
    位置n及以后的所有元素都要向后移动一个位置，为新元素留出空间。插入新元素后，如果数组列表新的大小超出了容量，数组列表就会重新分配他的储存数组。
 同样的，可以从数组列表中间删除一个元素：
        Employee e = staff.remove(n);
 位于这个位置之后的所有元素都向前移动一个位置，并且数组的大小减1。
    插入和删除元素的操作效率很低。对于较小的数组列表来说不需要担心这个问题，但如果储存的元素比较多，又经常需要在中间插入，删除元素，就应该考虑使用
 链表了。
 可以使用"for each"循环遍历数组列表的内容：
        for (Employee e : staff)
            do something with e
 这个循环和下列代码具有相同的效果：
        for (int i = 0; i < staff.size(); i++)
        {
            Employee e = staff.get(i);
            do something with e
        }

    3. 类型化与原始数据列表的兼容性
 假设有下面这个遗留下来的类
        public class EmployeeDB
        {
            public void update(ArrayList list) { . . . }
            public ArrayList find(String query) { . . . }
        }
 可以将一个类型化数据列表传给update方法，而并不需要进行任何强制类型转换。
        ArrayList<Employee> staff = . . .;
        employeeDB.update(staff);
    可以将staff对象直接传递给update方法。
    尽管编译器没有给出任何错误信息或井盖，但是这样调用并不太安全。在update方法中，添加到数组列表中的元素可能不是Employee类型。
    访问这些元素时就会出现异常
 相反，将一个原始ArrayList赋给一个类型化ArrayList会得到一个警告：
        ArrayList<Employee> result = employeeDB.find(query);     //yields warning
 使用强制类型转换并不能避免出现警告。
        ArrayList<Employee> result = (Array<Employee>) employeeDB.find(query);      //yields another warning
 这样会得到另外一条警告信息，指出类型转换有误。
    处于兼容性考虑，编译器检查到没有违反规则的现象之后，就将所有的类型化数组列表转换为初始ArrayList对象。在程序运行时，所有的数组列表都是一样的，
 即虚拟机中没有类型参数。因此，强制类型转换(ArrayList)和(ArrayList<Employee>)将执行相同的运行时检查。
    在这种情况下，你并不能做什么。在于一流的代码交互时，要研究编译器的警告，确保这些警告不太严重就行了。
 一旦确保问题不太严重，可以用@SuperessWarnings("unchecked")注解来标记接受强制类型转换的变量，如下所示
        @SuperessWarningWarnings("unchecked") ArrayList<Employee> result
            = (ArrayList<Employee>) employeeDB.find(query);     //yields another warning