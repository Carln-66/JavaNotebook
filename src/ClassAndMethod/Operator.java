package ClassAndMethod;

/********
 1. 数值之间类型转换
 不同类型间的数值转换可能存在精度损失
 当用两个二元运算符连接两个值时（如 n + f, n是整数，f是浮点数），先要将两个操作符转换成为同一类型再进行运算
 * 如果两个操作数中有一个事double类型，另一个操作数就会转换为double类型
 * 否则，如果其中一个操作数是float类型，另一个操作数将会转换为float类型
 * 否则，如果其中一个操作数是long类型，另一个操作数将会转换为long类型
 * 否则，两个操作数都将会被转换为int类型

 2. 强制类型转换
 损失信息的转换需要通过强制类型转换（cast）完成。
 强制类型转换语法格式：
 （想要转换的目标类型）待转换变量名

 如果想四舍五入运算，一边的到最接近的整数，需要使用Math.round方法

 3. 三元操作符
 x < y ? x : y      (会返回x和y中较小的那一个)

 4. 位运算符
 处理整型类型时，可以直接对组成证书的各个位完成操作。
 这意味着可以使用掩码技术得到整数中的各个位。
 位运算符包括
 &（"and"）    |("or")     ^("xor")    -("not")
 这些运算符按位模式处理。
 例如：如果n是一个整数变量，而且用二进制表示的n从右边数第4位为1，则
 int fourthBitFromRight = (n & 0b1000) / 0b1000;
 会返回1，否则返回0.
 利用&并结合使用适当的2的幂，可以把其他位掩掉，而只留下其中的某一位 。
 */


public class Operator {
    public static void main(String[] args) {
        double x = 9.997;
        int nx = (int) x;       //强制类型转换将通过截断小数部分将浮点值转换为整型
        System.out.println(nx);

        int fx = (int) Math.round(x);       //利用Math.round方法进行舍入运算
        System.out.println(fx);
    }
}
