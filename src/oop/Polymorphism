

 *                  多态性
 *              1. 理解多态性：可以理解为一个事务的多种形态
 *              2. 对象的多态性：父类的引用指向子类的对象
 *              Person p = new Man();
 *              3. 多态的使用：虚拟方法调用
 *                  有了对象的多态性以后，我们在编译期，只能调用父类中声明的方法，但是在运行期，我们实际执行的是子类重写父类的方法。
 *              总结：编译看左边，运行看右边。
 *              4. 多态性的使用前提：
 *                  ① 要有类的继承关系
 *                  ② 方法的重写
 *              5. 对象的多态性：只适用于方法，不适用于属性(编译和运行都看左面)。