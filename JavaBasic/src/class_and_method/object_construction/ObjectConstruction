    1. 重载
 一些类中有多个构造器。例如：可以构造如下一个空的StringBuilder对象
        var messages = new StringBuilder();
 或者可以指定一个初始字符串
        var todoList = new StringBuilder("To do :\n);
 这种功能称作重载(overloading)。
    如果多个方法(比如，StringBuilder构造器方法)有相同的名字，不同的参数，便出现了重载。编译器必须跳出具体调用哪个方法。他用各个方法首部终得参数类
 型与特定方法调用中所使用的值进行匹配，来选出正确的方法。如果编译器找不到匹配的参数，就会产生编译时错误，因为根本不存在匹配，或者没有一个比其他的更好
 (这个查找匹配的过程被称为重载解析(overloading resolution))

 Java允许重载包括构造器方法之内的任何方法。因此要完整的描述一个方法，需要指定方法名以及参数类型。这叫做方法的签名(signature)

    2. 默认字段初始化
    如果在构造器中没有显式的为字段设置初值，那么就会被自动的赋为默认值：数值为0，boolean值为false，对象引用为null。

    3. 无参数的构造器
 很多类都包含一个无参数的构造器，由无参数的额构造器创建对象时，对象的状态会设置为当前的默认值。例如，以下是Employee的无参数构造器
        public Employee()
        {
            name = " ";
            salary = 0;
            hireDay = LocalDate.now();
        }
    如果写一个类时没有编写构造器，就会为你提供一个无参数构造器。这个构造器将所有的实例字段设置为默认值。于是，实例字段终得数值型数据设置为0，布尔型
 数据设置为false，所有对象变量设置为null。
    如果类中提供了至少一个构造器，但是没有提供无参数的构造器，那么构造对象是不提供参数就是不合法的。
 例如Employee类中提供了一个简单的构造器：
        public Employee(String n, double s, int year, int month, int day)
 对于这个类，构造默认的员工就是不合法的，例如调用
        e = new Employee();     //程序报错
 *  仅当类没有其他任何构造器的时候，你才会得到一个默认的无参数的构造器。编写类的时候，如果写了一个你自己的构造器，要想让这个类的用户能够通过以下调用
 构造一个实例
        new ClassName()
    你就必须提供一个无参数的构造器。如果希望所有字段被赋予默认值，只需要以下代码
        public ClassName()
        {
        }

    4. 显式字段初始化
    通过重载类的构造器的方法，可以采用多种形式设置类的实例字段的初始状态。不管怎样调用构造器，每一个实例字段都要设置为一个有意义的初值，最好总是要确
 保这一点。
 可以在类定义中直接为任何字段赋值，如
        class Employee
        {
            private String name = "";
            . . .
        }
    在执行构造器之前先完成这个赋值操作。如果一个类的所有构造器都希望把某个特定的实例字段设置为同一个值，这个语法就特别有用。
    初始值不一定是常量值。在如下实例中，就是利用方法调用初始化一个字段。考虑以下Employee类，其中每个员工有一个id字段。
 可以使用下列方式进行初始化:
        class Employee
        {
            private static int nextId;
            private int id = assignId();
            . . .
            private static int assignId()
            {
                int r = nextId;
                nextId++;
                return r;
            }
            . . .
        }

    5. 参数名
 用单个字母作为参数名
        public Employee(String n, double s)
        {
            name = n;
            salary = s;
        }
 这样做不利于其他人阅读代码。
 比较好的做法是在每个参数前加一个前缀a：
        public Employee(String aName, double aSalary)
        {
            name = aName;
            salary = aSalary;
        }
    还有一种常用技巧，它基于这样的事实：参数变量会遮蔽同名的实例字段。例如，如果将参数命名为salary，salary将指示
 这个参数，而不是实例字段。但是，还可以用this.salary访问实例字段。this知识隐式参数，也就是所构造的对象。
        public Employee = name;
        {
            this.name = name;
            this.salary = salary;
        }

    6. 调用另一个构造器
    关键字this指示一个方法的隐式参数。不过，这个关键字还有另外一个含义。
 如果构造器的第一个语句形如this(...)，这个构造器将调用同一个类的另一个构造器，下面是一个典型例子
        public Employee(double s)
        {
            this("Employee #" + nextId, s);
            nextId++;
        }
    当调用new Employee(60000)时，Employee(double)构造器将调用Employee(String double)构造器。
    采用这种方式使用this关键字非常有用，这样对公共构造器代码只需要编写一次即可。